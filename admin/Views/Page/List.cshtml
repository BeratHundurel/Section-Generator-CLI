@model PaginatedList<Page>
@inject IUnitOfWork _uow
@{
    var items = Model;
    var isDeveloper = _uow.Admin.IsAccessByRole("developer");
}
@section libScript{
    <!--Data Tables js-->
    <script src="~/theme/assets/plugins/datatable/js/jquery.dataTables.min.js"></script>
    <script src="~/js/my_lib/list_data_table.js"></script>
}
@section libStyle{
    <!--Data Tables -->
    <link href="~/theme/assets/plugins/datatable/css/dataTables.bootstrap4.min.css" rel="stylesheet" type="text/css">
    <link href="~/theme/assets/plugins/datatable/css/buttons.bootstrap4.min.css" rel="stylesheet" type="text/css">
}

@await Component.InvokeAsync("Breadcrumb", new BreadcrumbViewModel { Title = "Sayfa Listesi" })

<div class="card">
    <div class="card-body">
        <div class="card-title">
            <h4 class="mb-0">Sayfalar</h4>
        </div>
        <hr />
        @if (isDeveloper)
        {
            <div class="alert alert-info">
                <b>Page</b> dışındaki sayfa türleri <b>Blog Detay</b> viewleri için alternatif olarak kullanılmaktadır. Yani <b>Blog detayına</b> giden
                bir url ilk önce <b>Blog Detay</b> sayfasını arar ve oradaki <b>section</b> tasarımına göre <b>Blogu</b> sayfaya entegre eder. <br />
                Böylelikle ekstra bir view kullanmaya gerek kalmaz. Ayrıca <b>Sayfa</b> mantığında çalıştığı için farklı <b>section yapıları</b> birllikte kullanılabilir.
                <b>Kurulum ve onarım için KURULUM-ONARIM sayfasını ziyaret edin.</b>
            </div>
        }
        <table class="table table-striped table-hover" id="dataTable">
            <thead>
                <tr>
                    <th class="noExport">AnaSayfa</th>
                    <th class="noExport">Aktifleştirme</th>
                    <th> Başlık </th>
                    <th> Seo Başlık </th>
                    <th> Permalink </th>
                    @if (isDeveloper)
                    {
                        <th>
                            Sayfa Türü
                        </th>
                    }
                    <th class="noExport"> İşlemler </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in items)
                {
                    <tr>
                        <td>
                            @await Component.InvokeAsync("FormElement", new { viewName = "Checkbox", vm = new FormElementViewModel { ItemId = item.Id, BoolValue = item.IsRoot, DataUrl = "/admin/page/isroot" } })
                        </td>
                        <td>
                            @await Component.InvokeAsync("Link", new { viewName = "Activation", vm = new LinkViewModel { Title = "Aktifleştir", IsActive = item.Enabled, DataId = item.Id, DataUrl = "/admin/page/PublishStatus" } })
                        </td>
                        <td> @item.Title </td>
                        <td> @item.SeoTitle  </td>
                        <td> <span class="badge badge-dark">@item.Sitemap.Permalink</span> </td>
                        @if (isDeveloper)
                        {
                            <td>
                                @if (item.PageType != null)
                                {
                                    <span class="badge badge-danger">
                                        @item.PageType.TypeTitle
                                    </span>
                                }
                            </td>
                        }
                        <td>
                            @await Component.InvokeAsync("Link", new { viewName = "Default", vm = new LinkViewModel { IconClass = "", Title = "Revizyonlar", ClassName = "btn-danger btn", Href = "/admin/pagerevision/list?pageId=" + item.Id } })
                            @await Component.InvokeAsync("Link", new { viewName = "Default", vm = new LinkViewModel { Title = "Güncelle", ClassName = "btn-info btn", Href = "/admin/page/manage/" + item.Id } })
                            @await Component.InvokeAsync("Link", new { viewName = "Delete", vm = new LinkViewModel { Title = "Sil", DataId = item.Id, ClassName = "btn btn-danger", DataUrl = "/admin/page/delete" } })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @await Component.InvokeAsync("Link", new { viewName = "Default", vm = new LinkViewModel { Title = "Yeni Ekle", Href = "/admin/" + ViewContext.RouteData.Values["controller"].ToString() + "/manage/" } })
        <div class="pagination-button">
            @{
                var prevDisabled = !items.PreviousPage ? "disabled" : "";
                var nextDisabled = !items.NextPage ? "disabled" : "";
            }
            <a asp-action="list" asp-route-pageNumber="@(items.PageIndex - 1)"
               class="btn btn-secondary @prevDisabled">Geri</a>
            <a asp-action="list" asp-route-pageNumber="@(items.PageIndex + 1)"
               class="btn btn-secondary @nextDisabled">İleri</a>
        </div>
    </div>
</div>